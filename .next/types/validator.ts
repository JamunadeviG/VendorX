// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../app/about/page.tsx
{
  const handler = {} as typeof import("../app/about/page.js")
  handler satisfies AppPageConfig<"/about">
}

// Validate ../app/auth/login/buyer/page.tsx
{
  const handler = {} as typeof import("../app/auth/login/buyer/page.js")
  handler satisfies AppPageConfig<"/auth/login/buyer">
}

// Validate ../app/auth/login/page.tsx
{
  const handler = {} as typeof import("../app/auth/login/page.js")
  handler satisfies AppPageConfig<"/auth/login">
}

// Validate ../app/auth/login/vendor/page.tsx
{
  const handler = {} as typeof import("../app/auth/login/vendor/page.js")
  handler satisfies AppPageConfig<"/auth/login/vendor">
}

// Validate ../app/auth/signup/page.tsx
{
  const handler = {} as typeof import("../app/auth/signup/page.js")
  handler satisfies AppPageConfig<"/auth/signup">
}

// Validate ../app/buyer/cart/page.tsx
{
  const handler = {} as typeof import("../app/buyer/cart/page.js")
  handler satisfies AppPageConfig<"/buyer/cart">
}

// Validate ../app/buyer/page.tsx
{
  const handler = {} as typeof import("../app/buyer/page.js")
  handler satisfies AppPageConfig<"/buyer">
}

// Validate ../app/contact/page.tsx
{
  const handler = {} as typeof import("../app/contact/page.js")
  handler satisfies AppPageConfig<"/contact">
}

// Validate ../app/page.tsx
{
  const handler = {} as typeof import("../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../app/seller/page.tsx
{
  const handler = {} as typeof import("../app/seller/page.js")
  handler satisfies AppPageConfig<"/seller">
}

// Validate ../app/seller/products/[id]/edit/page.tsx
{
  const handler = {} as typeof import("../app/seller/products/[id]/edit/page.js")
  handler satisfies AppPageConfig<"/seller/products/[id]/edit">
}

// Validate ../app/seller/products/new/page.tsx
{
  const handler = {} as typeof import("../app/seller/products/new/page.js")
  handler satisfies AppPageConfig<"/seller/products/new">
}

// Validate ../app/seller/products/page.tsx
{
  const handler = {} as typeof import("../app/seller/products/page.js")
  handler satisfies AppPageConfig<"/seller/products">
}

// Validate ../app/seller/requests/page.tsx
{
  const handler = {} as typeof import("../app/seller/requests/page.js")
  handler satisfies AppPageConfig<"/seller/requests">
}

// Validate ../app/api/auth/login/route.ts
{
  const handler = {} as typeof import("../app/api/auth/login/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/login">
}

// Validate ../app/api/auth/logout/route.ts
{
  const handler = {} as typeof import("../app/api/auth/logout/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/logout">
}

// Validate ../app/api/auth/signup/route.ts
{
  const handler = {} as typeof import("../app/api/auth/signup/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/signup">
}

// Validate ../app/api/buy-requests/route.ts
{
  const handler = {} as typeof import("../app/api/buy-requests/route.js")
  handler satisfies RouteHandlerConfig<"/api/buy-requests">
}

// Validate ../app/api/cart/route.ts
{
  const handler = {} as typeof import("../app/api/cart/route.js")
  handler satisfies RouteHandlerConfig<"/api/cart">
}

// Validate ../app/api/products/[id]/route.ts
{
  const handler = {} as typeof import("../app/api/products/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/products/[id]">
}

// Validate ../app/api/products/route.ts
{
  const handler = {} as typeof import("../app/api/products/route.js")
  handler satisfies RouteHandlerConfig<"/api/products">
}





// Validate ../app/layout.tsx
{
  const handler = {} as typeof import("../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
